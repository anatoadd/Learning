# 基本設計
# 1.1 インターフェースの設計
    -ユーザーとAIとの対話を行うためのウィンドウや入力フィールドを作成
    -ユーザーが設定できるオプションやルールに関するインターフェースを提供
# 1.2 データ構造の設計
    -学習内容や対話履歴を保存するためのデータベースまたはファイル形式を設計
    -学習内容や予測結果を効率的に保存・取得できるようにする
# 1.3 正誤判定・予測ロジック
    -ユーザーからの入力に基づいてAIが適切な予測を行うロジックを実装
    -正誤判定を行い、学習内容を蓄積していくための基盤を作成
# 1.4 確度計算の実装
    -AIの予測結果に対する確度を計算し、表示する機能を実装
    -確度の計算方法を設計し、学習の進行に従って更新できるようにする
# 1.5 データ永続化（保存）
    -学習内容や予測結果をファイルやデータベースに永続的に保存する仕組みを作成
    -保存先の指定やフォーマットを適切に管理

# ルール管理
# 2.1 ルール管理クラスの作成
    -学習方法や予測結果に影響を与えるルールを管理するクラスを作成
    -優先順位、変更不可、適用範囲などを管理する
# 2.2 学習・予測時にルール適用
    -学習プロセスや予測時に、設定したルールが適用されるように処理
    -例えば、確度表示をやめない、特定の言葉を使わない等のルールを守る
# 2.3 ルール変更不可機能
    -重要なルール（例：確度表示をやめない）を変更不可にする仕組みを実装
    -変更不可のルールが誤って変更されないようにチェックを行う
# 2.4 優先順位管理
    -複数のルールがある場合、優先順位に従って適切にルールを適用
    -高優先度のルールが他のルールを上書きしないようにする

# 学習方法
# 3.1 対話型学習
    -ユーザーとの対話を通じて、AIが学習を行う
    -ユーザーが与えた情報をAIが学習し、次回の予測に役立てる
# 3.2 学習進行の管理
    -学習の進行状況を管理し、どの情報を学習したかを追跡
    -学習内容が保存され、必要に応じて再学習が行えるようにする

# インターフェース設計
# 4.1 ユーザーインターフェース（UI）
    -ユーザーが簡単に学習進行状況を確認でき、設定できるインターフェースを作成
    -例えば、ルール変更、学習履歴の確認、予測の確度表示のオン/オフなど
# 4.2 ユーザーによるルール設定
    -ユーザーが学習や予測のルールを設定できるUIを提供
    -例えば、「確度表示をやめない」などのルールを設定・変更できる
# 4.3 ルール適用状態の表示
    -現在適用されているルールや優先順位を表示するダッシュボードを提供

# データ永続化と管理
# 5.1 学習内容の保存
    -学習内容（例：対話履歴、予測結果、ユーザー設定など）をファイルまたはデータベースに保存
    -保存形式（JSON、CSV、データベースなど）を選定し、効率的に保存・取得できるようにする
# 5.2 学習履歴の管理
    -学習内容とその進行状況を管理し、保存されたデータから再学習ができるようにする

# テストとデバッグ
# 6.1 ユニットテスト
    -各機能（学習、予測、ルール適用など）のユニットテストを行う
    -予測の精度やルール適用の確認
# 6.2 エラーハンドリング
    -ルール変更不可や優先順位の不整合などのエラーを適切に処理
    -ユーザーにわかりやすいエラーメッセージを表示
# 6.3 デバッグ
    -学習中や予測時に予期しない動作がないかを検証
    -ルールが適切に適用されているかを確認

# ユーザーインターフェースの改善
# 7.1 UI/UX調整
    -ユーザーが直感的に操作できるよう、インターフェースの改善を行う
    -ルール設定や学習結果の確認を分かりやすく表示
# 7.2 エラーハンドリング
    -ユーザーが誤った設定を行った場合、適切にエラーメッセージを表示し、修正を促す

# 追加機能
# 8.1 学習内容のフィードバック
    -ユーザーが学習内容にフィードバックを与え、それに基づいてAIが学習を改善する機能を追加
# 8.2 パフォーマンス改善
    -学習が進むにつれてパフォーマンスが向上するよう、効率的なアルゴリズムを使用